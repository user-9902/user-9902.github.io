import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.CPtCmog4.js";const e="/assets/1734436094342.P4iXttcv.jpg",g=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/CSS.md","filePath":"frontend/CSS.md","lastUpdated":null}'),l={name:"frontend/CSS.md"};function h(p,s,r,d,k,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="什么是css" tabindex="-1">什么是CSS <a class="header-anchor" href="#什么是css" aria-label="Permalink to &quot;什么是CSS&quot;">​</a></h2><h2 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-label="Permalink to &quot;盒子模型&quot;">​</a></h2><p>网页中所有元素都被一个个的盒子包围着。W3C标准盒子模型包括context padding border margin这几个部分。盒子模型一般分为**区块盒子（block）<strong>和</strong>行内盒子（inline）**盒子的模型决定了盒子与页面中的其他盒子之间的关系。</p><table tabindex="0"><thead><tr><th>block</th><th>inline</th></tr></thead><tbody><tr><td>盒子会产生换行。</td><td>盒子不换行</td></tr><tr><td>width和height会发挥作用。</td><td>width和height不会发挥作用</td></tr><tr><td>内外边界、边框会将其他盒子“推开”</td><td>垂直方向的内外边界、边框有效，但不会将其他inline盒子推开</td></tr><tr><td>未指定width默认会将容器占满</td><td>水平方向的内外边界、边框有效，但会将其他inline推开</td></tr></tbody></table><p>一些相关样式：</p><p>盒子模型 display：切换盒子模式、boxing-size：border-box content-box 决定width和height如何生效、</p><p>内边距：padding</p><p>外边距：margin</p><p>边框：border-style、border-color、border-width</p><h5 id="盒子模型的尺寸问题" tabindex="-1">盒子模型的尺寸问题 <a class="header-anchor" href="#盒子模型的尺寸问题" aria-label="Permalink to &quot;盒子模型的尺寸问题&quot;">​</a></h5><h3 id="css选择器" tabindex="-1">css选择器 <a class="header-anchor" href="#css选择器" aria-label="Permalink to &quot;css选择器&quot;">​</a></h3><h5 id="选择器类型" tabindex="-1">选择器类型 <a class="header-anchor" href="#选择器类型" aria-label="Permalink to &quot;选择器类型&quot;">​</a></h5><p>id选择器</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>伪类选择器</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* nth-of-type */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2n+1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 基数生效 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-of-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 偶数生效 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table tabindex="0"><thead><tr><th>类型</th><th>示例</th><th>作用范围</th></tr></thead><tbody><tr><td>id选择器</td><td>#a</td><td>id属性等于a的元素</td></tr><tr><td>类选择器</td><td>.clazz</td><td>class属性包含clazz的元素</td></tr><tr><td>标签选择器</td><td>div</td><td>tagname为div的元素</td></tr><tr><td>后代选择器</td><td>#box div</td><td>后代标签为div的所有元素</td></tr><tr><td>子选择器</td><td>.one &gt; p</td><td>one元素的子元素p</td></tr><tr><td>同胞选择器</td><td>.one + .two</td><td>与one相邻的 two元素</td></tr><tr><td>组选择器</td><td>div,p</td><td>多个选择器规则同时生效</td></tr><tr><td>伪类选择器</td><td>p:first-child p:last-child p:empty p:nth-child(2n+1) p:hover</td><td>伪类对样式的生效做出限制，使其在满足特定条件时才触发</td></tr><tr><td>伪元素选择器</td><td>p::after p::before p::selection</td><td>伪元素一般对</td></tr><tr><td>属性选择器</td><td>#id[attribute] #id[attribute=1]</td><td>id元素属性包含attribute属性</td></tr></tbody></table><h5 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h5><h3 id="margin塌陷与合并问题" tabindex="-1">margin塌陷与合并问题 <a class="header-anchor" href="#margin塌陷与合并问题" aria-label="Permalink to &quot;margin塌陷与合并问题&quot;">​</a></h3><p><strong>margin塌陷</strong>问题指的是嵌套父子块级元素垂直方向上的margin会结合到一起，取决于最大值。</p><p>​ 通过<strong>bfc</strong>（block formatting context）解决，bfc改变了块级元素内的渲染规则使其与外界隔开，如同在父元素内部加了一个”框“。</p><p>​ 触发bfc的条件：</p><p>​ body标签。</p><p>​ display值为table-cell、inline-block。</p><p>​ position为absolute、fixed。</p><p>​ overflow为visible。</p><p>​ float不为none</p><p><strong>margin合并</strong>问题指的是兄弟块元素之间垂直方向上的margin值会发生合并，由大的值决定。</p><p>​ 同样借助bfc解决给一个兄弟元素套一个父级元素并触发bfc</p><p><strong>bfc</strong>：即block formatting context，即块级格式上下文。bfc规定了Blockbox如何布局：</p><p>​ 内部的 Box 会在垂直方向上一个接一个放置</p><p>​ BFC 的区域不会与 float box 重叠</p><p>​ BFC 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素</p><p>​ 计算 BFC 的高度时，浮动元素也会参与计算</p><h2 id="css值处理" tabindex="-1">CSS值处理 <a class="header-anchor" href="#css值处理" aria-label="Permalink to &quot;CSS值处理&quot;">​</a></h2><ul><li>初始值</li><li>计算值</li><li>应用值</li><li>实际值</li></ul><p>属性的初始值是默认</p><h2 id="css选择器顺序、优先级与继承" tabindex="-1">CSS选择器顺序、优先级与继承 <a class="header-anchor" href="#css选择器顺序、优先级与继承" aria-label="Permalink to &quot;CSS选择器顺序、优先级与继承&quot;">​</a></h2><h4 id="层叠顺序" tabindex="-1">层叠顺序 <a class="header-anchor" href="#层叠顺序" aria-label="Permalink to &quot;层叠顺序&quot;">​</a></h4><h4 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h4><p>遵循越具体优先级越高的原则</p><p>!impontant &gt; 内联style &gt; id选择器 &gt; 属性选择器 &gt; 标签选择器</p><h4 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h4><h6 id="继承控制" tabindex="-1">继承控制： <a class="header-anchor" href="#继承控制" aria-label="Permalink to &quot;继承控制：&quot;">​</a></h6><p>css为控制继承提供了五个特殊的通用属性，每个css属性都能接受这些值。</p><ul><li>inherit：开启继承</li><li>initial：</li></ul><h2 id="常见布局方式" tabindex="-1">常见布局方式 <a class="header-anchor" href="#常见布局方式" aria-label="Permalink to &quot;常见布局方式&quot;">​</a></h2><h6 id="流式布局" tabindex="-1">流式布局 <a class="header-anchor" href="#流式布局" aria-label="Permalink to &quot;流式布局&quot;">​</a></h6><h6 id="flex布局" tabindex="-1">flex布局 <a class="header-anchor" href="#flex布局" aria-label="Permalink to &quot;flex布局&quot;">​</a></h6><h6 id="gurid布局" tabindex="-1">gurid布局 <a class="header-anchor" href="#gurid布局" aria-label="Permalink to &quot;gurid布局&quot;">​</a></h6><p>​ flex布局是轴线布局，可以看作<strong>一维</strong>布局，而gurid将容器划分为多行多列，可以视为<strong>二维</strong>布局</p><p>行列数设置：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33.33</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 33.33</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 33.33</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> // 三列 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> // 三行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  	// 一些简化的写法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); // </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">函数 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(3, 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto-fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); // 自动填充</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; // </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">是网格布局中特殊的单位，这里第一列120</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 剩余分成3份 中间1份 最后2份</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> minmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); // </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ninmax</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="浮动问题" tabindex="-1">浮动问题 <a class="header-anchor" href="#浮动问题" aria-label="Permalink to &quot;浮动问题&quot;">​</a></h3><p>浮动的元素（设置了float的元素）独立于正常的页面流，并表现为行内元素，后续的元素会补上其位置，浮动的元素不会遮蔽文字、图片。</p><p>浮动带来如下问题：父元素高度塌陷；非浮动的同级内联元素会跟随浮动</p><p>解决方法：父元素设置overflow:hidden；伪类clear:both</p><h3 id="css工程化的常见工具" tabindex="-1">css工程化的常见工具 <a class="header-anchor" href="#css工程化的常见工具" aria-label="Permalink to &quot;css工程化的常见工具&quot;">​</a></h3><p>都是前端工程化的一部分</p><p><strong>reset</strong>：如normalize.css。不同浏览器的默认样式是有差异的，reset默认样式来保证各平台体验的一致性。</p><p><strong>预编译</strong>：如less scss的css预编译语言，同ts的定位。为css补充了很多特性，如mixin、变量、函数、嵌套等。</p><p><strong>后处理器</strong>：如postcss，他类似babel的定位。用以规范我们书写的css，解决浏览器的兼容性问题等。</p><p><strong>规范lint</strong>：stylelint，同eslint的定位。用以检查开发中css的语法错误等。</p><p><strong>低代码</strong>：Tailwindcss，通过特点的语法如：bg-white（background-color：white）p-4 (padding:1rem)，使得开发者尽可能少的书写css。</p><h3 id="css的性能如何优化" tabindex="-1">css的性能如何优化 <a class="header-anchor" href="#css的性能如何优化" aria-label="Permalink to &quot;css的性能如何优化&quot;">​</a></h3><p>样式内容写入header中以避免首屏回流</p><p>避免复杂的选择器</p><p>避免不必要的重复、使用变量</p><p>避免内联样式、避免！impontant</p><p>避免使用浮动类型，减少浏览器分层</p><p>经可能触发GPU加速来实现动画，如while-change、transform、position：fixed</p><p>content-visibility：auto；contain：content</p><h3 id="移动端适配" tabindex="-1">移动端适配 <a class="header-anchor" href="#移动端适配" aria-label="Permalink to &quot;移动端适配&quot;">​</a></h3><p>meta中viewport的配置，以规范视口，防止左右滚动，页面缩放等。</p><p>响应式布局单位使用：rem vw vh vmin %</p><p>flex布局：展示保证灵活性</p><p>媒体查询：处理定制化的内容</p><h3 id="tailwind" tabindex="-1">Tailwind <a class="header-anchor" href="#tailwind" aria-label="Permalink to &quot;Tailwind&quot;">​</a></h3><p>[<a href="https://www.liaoxuefeng.com/article/1581018697957408" target="_blank" rel="noreferrer">现代CSS框架：Tailwind CSS - 廖雪峰的官方网站 (liaoxuefeng.com)</a>](<a href="https://www.michaeljier.cn/blog/diving-into-tailwindcss" target="_blank" rel="noreferrer">https://www.michaeljier.cn/blog/diving-into-tailwindcss</a>)</p><p>TailwindCSS是一个css框架，会扫描所有的HTML文件，JSX组件，生成相应的样式，省去了我们书写样式的时间。本质上Tailwind是一个postcss插件。</p><h3 id="层叠上下文-层叠顺序" tabindex="-1">层叠上下文 层叠顺序 <a class="header-anchor" href="#层叠上下文-层叠顺序" aria-label="Permalink to &quot;层叠上下文 层叠顺序&quot;">​</a></h3><p>dom元素不只有x轴 y轴坐标，还有一个z轴坐标。决定了当元素出现重叠时，如何展示。</p><p>层叠上下文：</p><p>符合以下条件会产生层叠上下文：</p><ul><li>html根元素</li><li>position 值为 <code>absolute</code>（绝对定位）或 <code>relative</code>（相对定位）且 z-index 值不为 <code>auto</code> 的元素</li><li>position 值为 fixed 或 sticky</li><li>flex or grid容器的子元素，且z-index值 不为 auto</li><li>opacity &lt; 1 的元素</li><li>等 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context" target="_blank" rel="noreferrer">层叠上下文 - CSS：层叠样式表 | MDN</a></li></ul><p>层叠顺序</p><p><img src="`+e+'" alt="图片"></p><p>处于不同层叠上下文的两个元素，他们的覆盖关系由层叠上下文决定。 处于同一层叠上下文的两个元素，覆盖关系由层叠顺序决定。 处于同一层叠上下文，且层叠顺序相同的元素，后面的元素会置于前面元素的上面。</p><h3 id="手机上画1px的线为什么比电脑上粗" tabindex="-1">手机上画1px的线为什么比电脑上粗？ <a class="header-anchor" href="#手机上画1px的线为什么比电脑上粗" aria-label="Permalink to &quot;手机上画1px的线为什么比电脑上粗？&quot;">​</a></h3><p>原理：</p><p>移动端高清屏的物理像素密度更高，1像素对应 2*2 or 3*3物理像素。所以看起来更粗些。</p><p>解决方案：</p><p>直接设置为0.5px，在安卓上会被当做0px，存在兼容问题。</p><p>transform: scaleY(.5);</p>',95)]))}const b=i(l,[["render",h]]);export{g as __pageData,b as default};
