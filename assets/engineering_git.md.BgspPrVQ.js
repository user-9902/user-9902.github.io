import{_ as i,c as l,o as e,ag as a}from"./chunks/framework.CPtCmog4.js";const r="/assets/1747724099429.DsZzejPc.jpg",d="/assets/1747799536741.Dxwhp-p9.jpg",m=JSON.parse('{"title":"GIT","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/git.md","filePath":"engineering/git.md","lastUpdated":null}'),o={name:"engineering/git.md"};function n(p,t,h,s,c,g){return e(),l("div",null,t[0]||(t[0]=[a('<h1 id="git" tabindex="-1">GIT <a class="header-anchor" href="#git" aria-label="Permalink to &quot;GIT&quot;">​</a></h1><h2 id="git是什么" tabindex="-1">GIT是什么 <a class="header-anchor" href="#git是什么" aria-label="Permalink to &quot;GIT是什么&quot;">​</a></h2><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发管理而开发的一个开源的版本控制软件，用于敏捷高效地处理任何或小或大的项目。Git采用分布式版本库的方式，不必服务器端软件的支持。</p><h2 id="工作区、暂存区、版本库" tabindex="-1">工作区、暂存区、版本库 <a class="header-anchor" href="#工作区、暂存区、版本库" aria-label="Permalink to &quot;工作区、暂存区、版本库&quot;">​</a></h2><p><img src="'+r+'" alt=""></p><ul><li>工作区：就是你在电脑里能看到的目录。</li><li>暂存区：英文叫 stage 或 index。一般存放在 .git 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</li></ul><p>我们在工作区进行代码的编写</p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><h2 id="常见的命令" tabindex="-1">常见的命令 <a class="header-anchor" href="#常见的命令" aria-label="Permalink to &quot;常见的命令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>功能</th><th>作用</th><th>命令</th></tr></thead><tbody><tr><td>分支管理</td><td><code>git branch</code> 管理分支</td><td>git branch new-branch 创建分支<br>git branch -d old-branch 删除分支</td></tr><tr><td>合并</td><td><code>git merge</code> 管理分支</td><td></td></tr><tr><td>摘取</td><td><code>git cherry-pick</code> 将一个分支的特定更改移植到另一个分支</td><td>git cherry-pick commit</td></tr><tr><td>检出</td><td><code>git checkout</code></td><td></td></tr><tr><td>变基</td><td><code>git rebase</code></td><td></td></tr><tr><td>暂存</td><td><code>git stash</code> 命令允许你临时保存当前工作目录的更改，以便你可以切换到其他分支或处理其他任务</td><td>git stash 暂存当前工作进度<br>git stash list 查看暂存list<br>git stash apply 恢复最近一次暂存的内容<br>git stash pop</td></tr><tr><td>回滚</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="git与svn的区别" tabindex="-1">GIT与SVN的区别 <a class="header-anchor" href="#git与svn的区别" aria-label="Permalink to &quot;GIT与SVN的区别&quot;">​</a></h2><p><img src="'+d+'" alt=""></p><ol><li><p>版本控制方式</p><ul><li><p>Git是分布式版本控制系统,每个开发者都有完整的代码仓库副本</p></li><li><p>SVN是集中式版本控制系统,所有代码都存储在中央服务器上</p></li></ul></li><li><p>分支管理</p><ul><li>Git分支管理轻量高效,创建和切换分支的开销很小</li><li>SVN创建分支的成本较高,分支管理相对复杂</li></ul></li><li><p>版本号机制</p><ul><li>Git使用SHA-1哈希值作为版本号</li><li>SVN使用递增的数字作为版本号</li></ul></li><li><p>离线工作</p><ul><li>Git支持完全离线工作,可以在本地进行提交等操作</li><li>SVN需要与服务器保持连接才能进行大多数操作</li></ul></li><li><p>权限管理</p><ul><li><p>Git权限管理相对简单</p></li><li><p>SVN具有更细粒度的权限控制系统</p></li></ul></li></ol><h2 id="flow工作流" tabindex="-1">flow工作流 <a class="header-anchor" href="#flow工作流" aria-label="Permalink to &quot;flow工作流&quot;">​</a></h2><p>Git flow是一个成熟的分支管理模型,主要包含以下分支:</p><ol><li><p>master/main分支</p><ul><li>存放正式发布的生产环境代码</li><li>只能从release分支或hotfix分支合并</li><li>每个合并都应该打上版本标签</li></ul></li><li><p>develop分支</p><ul><li>主要的开发分支</li><li>包含下一个版本的最新开发特性</li><li>从master分支创建</li><li>功能开发完成后合并到release分支</li></ul></li><li><p>feature分支</p><ul><li>用于开发新功能</li><li>从develop分支创建</li><li>功能完成后合并回develop分支</li><li>命名通常为: feature/功能名</li></ul></li><li><p>release分支</p><ul><li>准备发布新版本时使用</li><li>从develop分支创建</li><li>只进行bug修复和文档更新</li><li>完成后同时合并到master和develop分支</li><li>命名通常为: release/版本号</li></ul></li><li><p>hotfix分支</p><ul><li><p>用于修复生产环境的紧急问题</p></li><li><p>从master分支创建</p></li><li><p>完成后同时合并到master和develop分支</p></li><li><p>命名通常为: hotfix/问题描述</p></li></ul></li></ol><p>日常开发在develop分支进行新功能，开发时从develop创建feature分支，版本发布时从develop创建release分支，生产问题修复从master创建hotfix分支，始终保持master分支代码的稳定性，这种工作流程可以帮助团队更好地管理代码版本,特别适合需要维护多个版本的项目。</p><h2 id="git服务器搭建" tabindex="-1">GIT服务器搭建 <a class="header-anchor" href="#git服务器搭建" aria-label="Permalink to &quot;GIT服务器搭建&quot;">​</a></h2><p>裸存储库的搭建已经不能满足现代开发的场景了。gitlab提供了更丰富的用户管理，CI/CD，代码审查等功能。</p><h5 id="git-分布式版本管理工具" tabindex="-1">Git：分布式版本管理工具 <a class="header-anchor" href="#git-分布式版本管理工具" aria-label="Permalink to &quot;Git：分布式版本管理工具&quot;">​</a></h5><p>仓库 git clone 克隆仓库 git init 初始化仓库 操作暂存区域 git status 暂存区状态 git add 添加变动至暂存区 git rm 删除暂存区的变动 git commit 提交暂存区 操作remote git remote -v 查看远程信息 git push origin branch -u 推送至远程分支并记住推送远程地址和分支 git pull 拉取commit至本地 分支操作 git checkout branchname 切换分支 git branch branchname [-d] 创建\\删除分支 git reset branchname~2<br> git revert 比起reset会留下足迹 git merge branchname 将branchname分支的修改拷贝一份至当前分支 git rebase branchname 将branchname分支的修改转移至当前分支 flow工作流</p><p>​ main分支 线上版本分支</p><p>​ develop分支 管理待发布代码，由feature合并而来</p><p>​ release分支 由develop切出来，在该分支进行下个版本代码的测试，测试完毕后合并至main分支</p><p>​ hotfix分支 热更新分支，用以main分支的管理</p><p>​ feature分支 新特性分支</p><h1 id="git-1" tabindex="-1">Git <a class="header-anchor" href="#git-1" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><ul><li>git init 初始化仓库，会生成一个git目录，包含资源目录</li><li>git config <ul><li>git config --global user.name &#39;你的用户名&#39; // 配置用户名称，提交时会携带用户信息</li><li>git config --global user.email &#39;你的邮箱&#39; // 配置用户邮箱</li></ul></li><li></li><li>git checkout 切换分支</li><li></li><li></li><li>git reset 回退header</li></ul>',29)]))}const b=i(o,[["render",n]]);export{m as __pageData,b as default};
