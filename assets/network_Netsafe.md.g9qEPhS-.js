import{_ as p,c as e,o as l,ag as i}from"./chunks/framework.CPtCmog4.js";const u=JSON.parse('{"title":"网安","description":"","frontmatter":{},"headers":[],"relativePath":"network/Netsafe.md","filePath":"network/Netsafe.md","lastUpdated":null}'),t={name:"network/Netsafe.md"};function r(o,a,s,n,h,d){return l(),e("div",null,a[0]||(a[0]=[i('<h1 id="网安" tabindex="-1">网安 <a class="header-anchor" href="#网安" aria-label="Permalink to &quot;网安&quot;">​</a></h1><h3 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h3><p>cross-site scripting跨站脚本攻击，通过注入恶意脚本攻击的是用户会话，如获取会话中cookies等信息。</p><p>攻</p><ul><li><p>反射型：在搜索框中输入形如 &lt;script&gt; alert(‘攻击’) &lt;/script&gt; 的内容，网站不过滤，则导致用户的会话存在风险</p></li><li><p>注入型：恶意代码注入到服务器，如评论区的内容会保存在服务器，所有其他用户都能看到评论。</p></li><li><p>Dom型：无服务器参与，如通过 innerHtml 的方式将location.hash渲染至页面上。</p></li></ul><p>防</p><ul><li><p>CSP（见上CSP）</p></li><li><p>用户输入内容的地方需要过滤</p></li><li><p>上传至服务器的内容要过滤</p></li></ul><h3 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h3><p>盗用cookies，伪装成正常用户与服务器进行交互。</p><p>攻</p><ul><li><p>post型：当用户登录a网站后（拥有a网站的cookies时）点击到了非法的链接，该非法链接中打开后有个自动向a网站提交的form表单，即可用盗用用户的cookies身份向a网站发送请求。</p></li><li><p>get型：Img链接会触发get请求，同样当用户在登录a网站后获取a网站身份后，非法连接中有个非法img，该img其实为a网站的一个get请求地址。</p></li></ul><p>防</p><p>多重身份验证，如：验证refer请求头、短信验证、验证码验证等。</p><h3 id="恶意iframe" tabindex="-1">恶意iframe <a class="header-anchor" href="#恶意iframe" aria-label="Permalink to &quot;恶意iframe&quot;">​</a></h3><p>攻</p><p>恶意站点通过iframe来嵌套其他的网站进行伪装。</p><p>防</p><ul><li><p>CSP</p></li><li><p>self === top 来判断我们的网页是否被别的网站iframe嵌套了</p></li><li><p>http请求头Referer</p></li></ul><h3 id="恶意跳转连接" tabindex="-1">恶意跳转连接 <a class="header-anchor" href="#恶意跳转连接" aria-label="Permalink to &quot;恶意跳转连接&quot;">​</a></h3><p>攻</p><p>恶意利用合法站点内的重定向，如 <a href="https://link.csdn.net/?target=https://www.evil.com/" target="_blank" rel="noreferrer">https://link.csdn.net/?target=https://www.evil.com/</a> 。被攻击者乍一看这是合法站点csdn的网址，其实是跳转至站外的。</p><p>放</p><p>站内向站外跳转统一管理。</p><h3 id="sql注入" tabindex="-1">SQL注入 <a class="header-anchor" href="#sql注入" aria-label="Permalink to &quot;SQL注入&quot;">​</a></h3><p>攻</p><p>传输给服务端的内容，一些字段会存入数据库，在这些字段中插入恶意的SQL代码，以攻击数据库。</p><p>防</p><p>使用参数化查询/预编译语句，确保用户输入被视为数据而非代码。</p><p>输入验证与清理</p><p>权限管理</p><h3 id="ddos攻击" tabindex="-1">DDOS攻击 <a class="header-anchor" href="#ddos攻击" aria-label="Permalink to &quot;DDOS攻击&quot;">​</a></h3><p>DOS攻击 Denial-of-Service 拒绝服务攻击，攻击的是服务端，使得服务器瘫痪，无法处理其他合法用户的请求。</p><p>DDOS攻击既DOS攻击加上分布式（Distributed)。使得防御变得更加的困难。</p><p>攻</p><ul><li><p>HTTP洪水：大量标准的GET或POST请求占用服务器资源。</p></li><li><p>SYN洪水:TCP三次握手只发送第一次SYN请求，不发送第三次SYN-ACK确认请求，使得服务器留下许多的SYN-ACK。</p></li><li><p>死亡ping：向主机发送大量大数据包的ping请求，通常发送大于64k个字节的ICMP包，使得报文在目标主机上重组，重组需要缓冲区，大量的大体积的数据包会击穿缓冲区。</p></li></ul><p>防</p><ul><li><p>ip黑白名单管理。</p></li><li><p>流量管控：负载均衡、流量清洗、智能路由将恶意流量引导至黑洞。</p></li><li><p>监控＋预案：监测网络流量以作出快速相应，做好应急预案。</p></li></ul><h3 id="dns劫持" tabindex="-1">DNS劫持 <a class="header-anchor" href="#dns劫持" aria-label="Permalink to &quot;DNS劫持&quot;">​</a></h3><p>dns劫持，又称域名劫持，DNS服务原本用以解析域名ip，攻击者劫持了用户的DNS服务，将非法的ip返回给用户，导致用户访问了错误的网址。</p><p>攻</p><ul><li><p>当用户的终端设备、操作系统被黑入，操作系统上的CDN服务被控制时，就可能被CDN劫持攻击。</p></li><li><p>当路由设备的固件被黑入，局域网便不再安全。</p></li></ul><p>防</p><ul><li><p>确保终端设备的安全，正规渠道购买设备，装入主流的操作系统，不要乱下载软件。</p></li><li><p>确保路由设备的安全，正规渠道购买路由设备，为路由设备设置复杂的密码，不随便接入他人的局域网。</p></li></ul><h3 id="降级攻击" tabindex="-1">降级攻击 <a class="header-anchor" href="#降级攻击" aria-label="Permalink to &quot;降级攻击&quot;">​</a></h3><p>攻</p><p>攻击者作为中间节点，拦截了用户和服务端的通讯。协商TLS层的策略，降级至存在漏洞的 SSL3.0</p><p>防</p><p>禁用 SSL3.0</p><h3 id="文件上传漏洞" tabindex="-1">文件上传漏洞： <a class="header-anchor" href="#文件上传漏洞" aria-label="Permalink to &quot;文件上传漏洞：&quot;">​</a></h3><p>攻击者将可执行文件上传至服务器，诱使用户或管理员下载执行，进而使得恶意脚本被执行。通常通过伪装文件名后缀，特殊文件名，截断字符等方式绕过安全校验。</p><p>攻</p><p>apache系统漏洞：解析文件时,会从右向左,解析后缀,直至遇到一个能解析的拓展名</p><p>nginx系统漏洞：将shell语句附在正常图片文件</p><p>防</p><p>限制上传文件的权限，不允许执行。</p><p>限制上传文件的类型。</p>',56)]))}const f=p(t,[["render",r]]);export{u as __pageData,f as default};
