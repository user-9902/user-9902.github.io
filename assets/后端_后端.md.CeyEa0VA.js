import{_ as e,c as t,o as p,ag as r}from"./chunks/framework.CPtCmog4.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"后端/后端.md","filePath":"后端/后端.md","lastUpdated":null}'),o={name:"后端/后端.md"};function n(_,a,s,l,d,i){return p(),t("div",null,a[0]||(a[0]=[r('<h3 id="mq" tabindex="-1">MQ <a class="header-anchor" href="#mq" aria-label="Permalink to &quot;MQ&quot;">​</a></h3><p>消息队列（MQ）是分布式系统中不可或缺的技术之一。解耦、削峰，还是异步任务处理，都离不开MQ的身影。</p><h5 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h5><p>异步处理：</p><p>用户下单后，需要发送短信（异步）通知下用户，为了不阻断订单的生成，将发送短信的任务交给MQ，继续处理订单的业务。即便短信业务挂了，MQ会把消息暂存后续也会保证短信的发送。</p><p>流量削峰：</p><p>商品秒杀时，高并发的请求会冲垮应用服务，干趴数据库。 直接将用户的请求置于MQ中，以保证应用服务的稳定。</p><p>服务解耦：</p><p>一个订单的完成，需要订单系统通知，库存系统、支付系统等系统，这样系统间就形成了依赖关系。 订单系统直接将消息交给MQ，库存、支付系统从MQ中消费消息即可。</p><p>延迟任务：</p><p>用户下单后，30分钟为付款，需要取消订单。</p><p>数据一致性：</p>',12)]))}const h=e(o,[["render",n]]);export{m as __pageData,h as default};
