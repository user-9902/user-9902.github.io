import{_ as e,c as i,o as t,ag as l}from"./chunks/framework.CPtCmog4.js";const u=JSON.parse('{"title":"鸿蒙开发","description":"","frontmatter":{},"headers":[],"relativePath":"harmony_os/HarmonyOS.md","filePath":"harmony_os/HarmonyOS.md","lastUpdated":null}'),r={name:"harmony_os/HarmonyOS.md"};function s(n,a,o,h,d,p){return t(),i("div",null,a[0]||(a[0]=[l(`<h1 id="鸿蒙开发" tabindex="-1">鸿蒙开发 <a class="header-anchor" href="#鸿蒙开发" aria-label="Permalink to &quot;鸿蒙开发&quot;">​</a></h1><p>鸿蒙SDK以Kit为维度，提供丰富的开放能力，开发者通过Kit来和操作系统进行交互。</p><ul><li>应用框架 Kit： <ul><li>Ability Kit：为应用的运行提供底层支撑，提供进程的创建销毁；提供应用上下文环境、系统环境监听等能力。</li><li>ArkUI：应用UI开发的框架</li><li>ArkData：数据管理，提供数据持久化、内存对象跨设备共享等能力</li><li>ArkWeb：</li></ul></li><li>系统性相关 Kit： <ul><li>Network Kit：网络服务</li><li>Universal Keystore Kit：密钥管理服务</li></ul></li><li>媒体相关 Kit： <ul><li>Audio Kit：音频服务</li><li>Media Library Kit：媒体文件管理服务</li><li></li></ul></li></ul><h2 id="ability-kit" tabindex="-1">Ability Kit <a class="header-anchor" href="#ability-kit" aria-label="Permalink to &quot;Ability Kit&quot;">​</a></h2><p>对应用的开发和运行提供服务，对多种模型应用的开发，应用内交互，应用间交互，跨设备应用交互等功能提供支撑。</p><p>服务包含：</p><ul><li>提供应用进程创建和销毁、应用生命周期调度能力。</li><li>提供应用组件运行入口、应用组件生命周期调度、组件间交互等能力。</li><li>提供应用上下文环境、系统环境变化监听等能力。</li><li>提供应用流转能力。</li><li>提供多包机制、共享包、应用信息配置等能力，详见<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-package-overview" target="_blank" rel="noreferrer">应用程序包概述</a>。</li><li>提供程序访问控制能力，详见<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/access-token-overview" target="_blank" rel="noreferrer">访问控制概述</a>。</li><li>提供安全密码自动填充能力，详见<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/passwordvault-overview" target="_blank" rel="noreferrer">密码自动填充服务概述</a>。</li></ul><h4 id="应用模型" tabindex="-1">应用模型 <a class="header-anchor" href="#应用模型" aria-label="Permalink to &quot;应用模型&quot;">​</a></h4><p>FA模型与Stage模型</p><p>Stage模型与FA模型最大的区别在于，Stage模型，多个应用共享一个ArkTS引擎实例。</p><p>Stage模型是自HarmonyOS API 9以来主推的模型</p><ul><li>应用模块化： <ul><li>Ability Module：用于实现应用的功能和特性。 <ul><li>Entry Module：应用的入口，包含应用图标、入口界面等。一个应用只能有0或1个entry类型的module。</li><li>Feature Module： 应用的特性模块。</li></ul></li><li>Library Module: 用于代码和资源共享。 <ul><li>Static Library: 静态共享包，被引用时会跟随引用方一起编译打包。</li><li>Shared Library：动态共享包，可以独立编译，运行时在一个进程中只有一份。</li></ul></li></ul></li></ul><h4 id="容器类型" tabindex="-1">容器类型 <a class="header-anchor" href="#容器类型" aria-label="Permalink to &quot;容器类型&quot;">​</a></h4><table tabindex="0"><thead><tr><th>线性容器</th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="并发" tabindex="-1">并发 <a class="header-anchor" href="#并发" aria-label="Permalink to &quot;并发&quot;">​</a></h2><p>异步并发：Promise、async/await 同js</p><p>多线程：</p><h2 id="arkui" tabindex="-1">ArkUI <a class="header-anchor" href="#arkui" aria-label="Permalink to &quot;ArkUI&quot;">​</a></h2><h4 id="mvvm-模式" tabindex="-1">MVVM 模式 <a class="header-anchor" href="#mvvm-模式" aria-label="Permalink to &quot;MVVM 模式&quot;">​</a></h4><p>ArkUI采用MVVM的设计模式，状态管理模块将视图和数据绑定到一起。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyManage/011/111/111/0000000000011111111.20240621100222.65349680055492775589799013296844:50001231000000:2800:C9E49D23C90ABBAB7D26C487E2C506092F465154598165E7030006DD043C2EB8.jpg?needInitFileName=true" alt=""></p><h4 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@State	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明响应式变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Prop	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明参数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Component	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	组件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Preview	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加到preview</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="arckui" tabindex="-1">ArckUI <a class="header-anchor" href="#arckui" aria-label="Permalink to &quot;ArckUI&quot;">​</a></h2><h4 id="stage模型" tabindex="-1">Stage模型 <a class="header-anchor" href="#stage模型" aria-label="Permalink to &quot;Stage模型&quot;">​</a></h4><h4 id="包类型" tabindex="-1">包类型 <a class="header-anchor" href="#包类型" aria-label="Permalink to &quot;包类型&quot;">​</a></h4><p>HAP：Ability</p><p>​ 引用安装的基本单元，HAP包由代码、资源、三方库、配置文件等打包生成的模块包，主要有两种类型： feature 和 entry，entry作为应用的主入口，提供应用的基础能力；feature作为应用的动态特性模块，可以更具用户的设备类型，动态选择安装。</p><p>HAR：Static Library</p><p>HSP：Shared Library</p><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h4>`,31)]))}const b=e(r,[["render",s]]);export{u as __pageData,b as default};
